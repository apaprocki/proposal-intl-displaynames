<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Intl.DisplayNames Proposal
status: proposal
stage: 2
location: https://github.com/tc39-transfer/proposal-intl-displaynames
copyright: true
contributors: Google, Ecma International
</pre>
<emu-biblio href="./biblio.json"></emu-biblio>
<emu-clause id="intl-displaynames-objects">
  <h1>DisplayNames Objects</h1>
  <p>
    For motivation and a high-level introduction, see <a href="https://github.com/tc39/proposal-intl-displaynames/blob/master/README.md">the explainer document</a>.
  </p>
  <p>
    This proposal is intended to provide translation for strings of particular items which are application-independent, rather than translation for all kinds of strings. There are two classes of strings we're considering here:
    <ul>
      <li>
        Strings that are already available because they're needed for other APIs. For example, names for the days of the week are necessary to provide Intl.DateTimeFormat capabilities. In the absence of a direct API, we see programs parsing the output of Intl.DateTimeFormat to find these names, which is an unreliable/unstable technique.
      </li>
      <li>
        Strings that are universally standardized and are likely necessary for any multilingual JavaScript application. For example language/region names.
      </li>
    </ul>
  </p>
  <p>
    For example, for language/region names, W3C recommends users to use a locale selector when handling multilingual content, and currently that means shipping a long list of translated language/region names with every such website.
  </p>
  <p>
  Such data may potentially be time and politically sensitive and is unlikely to be specific to any particular website (i.e., it's unlikely that website A will want a different translation of any language name from website B).
  </p>
  <p>
  For that reason, providing this data in the engine lowers the cost of shipping multilingual websites with locale selectors and move the responsibility for keeping the mapping of BCP47 language/region codes to display names with the engine which is in a better position to keep it up to date.
  </p>
  <p>
  The set of strings included may grow over time, but we expect to restrict the growth according to pragmatic requirements, including:
    <ul>
      <li>
        Strings which are included should be generically useful across multiple application types.
      </li>
      <li>
        The inclusion of strings should not be too much of a burden on implementations in terms of data size.
      </li>
      <li>
        There should be an open data source that implementations can use for the string values, e.g., CLDR.
    </ul>
  </p>
  <p>
  Additional strings included in Intl.DisplayNames would be added to the specification through a future ECMA-402 proposal, to be presented in the ECMA-402 Task Group and TC39 as part of its standardization through TC39 processes.
  </p>
  <emu-clause id="sec-intl-displaynames-abstracts">
    <h1>Abstract Operations for DisplayNames Objects</h1>

    <emu-clause id="sec-isvalidcodefordatetimefield" aoid="IsValidCodeForDateTimeField">
      <h1>IsValidCodeForDateTimeField ( _code_ )</h1>
      <p>
        The IsValidCodeForDateTimeField abstract operation verifies that the given _code_ is valid.
      </p>
      <emu-alg>
        1. If _code_ is listed in <emu-xref href="#table-validcodefordatetimefield"></emu-xref>, return *true*.
        1. Return *false*.
      </emu-alg>

      <emu-table id="table-validcodefordatetimefield">
        <emu-caption>Codes For Date Time Field of DisplayNames</emu-caption>
        <table class="real-table">
          <thead>
            <tr>
              <th>Code</th>
            </tr>
          </thead>
          <tr>
            <td>`"era"`</td>
          </tr>
          <tr>
            <td>`"year"`</td>
          </tr>
          <tr>
            <td>`"quarter"`</td>
          </tr>
          <tr>
            <td>`"month"`</td>
          </tr>
          <tr>
            <td>`"weekOfYear"`</td>
          </tr>
          <tr>
            <td>`"weekday"`</td>
          </tr>
          <tr>
            <td>`"day"`</td>
          </tr>
          <tr>
            <td>`"dayPeriod"`</td>
          </tr>
          <tr>
            <td>`"hour"`</td>
          </tr>
          <tr>
            <td>`"minute"`</td>
          </tr>
          <tr>
            <td>`"second"`</td>
          </tr>
          <tr>
            <td>`"timeZoneName"`</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>

    <emu-clause id="sec-isvalidcodefordatetime" aoid="IsValidCodeForDateTime">
      <h1>IsValidCodeForDateTime ( _code_ )</h1>
      <p>
        The IsValidCodeForDateTime abstract operation verifies that the given _code_ is valid.
      </p>
      <emu-alg>
        1. If _code_ is listed in <emu-xref href="#table-validcodefordatetime"></emu-xref>, return *true*.
        1. Return *false*.
      </emu-alg>

      <emu-table id="table-validcodefordatetime">
        <emu-caption>Codes For Date Time of DisplayNames</emu-caption>
        <table class="real-table">
          <thead>
            <tr>
              <th>Code</th>
            </tr>
          </thead>
          <tr>
            <td>`"sunday"`</td>
          </tr>
          <tr>
            <td>`"monday"`</td>
          </tr>
          <tr>
            <td>`"tuesday"`</td>
          </tr>
          <tr>
            <td>`"wednesday"`</td>
          </tr>
          <tr>
            <td>`"thursday"`</td>
          </tr>
          <tr>
            <td>`"friday"`</td>
          </tr>
          <tr>
            <td>`"saturday"`</td>
          </tr>
          <tr>
            <td>`"january"`</td>
          </tr>
          <tr>
            <td>`"february"`</td>
          </tr>
          <tr>
            <td>`"march"`</td>
          </tr>
          <tr>
            <td>`"april"`</td>
          </tr>
          <tr>
            <td>`"may"`</td>
          </tr>
          <tr>
            <td>`"june"`</td>
          </tr>
          <tr>
            <td>`"july"`</td>
          </tr>
          <tr>
            <td>`"august"`</td>
          </tr>
          <tr>
            <td>`"september"`</td>
          </tr>
          <tr>
            <td>`"october"`</td>
          </tr>
          <tr>
            <td>`"november"`</td>
          </tr>
          <tr>
            <td>`"december"`</td>
          </tr>
          <tr>
            <td>`"q1"`</td>
          </tr>
          <tr>
            <td>`"q2"`</td>
          </tr>
          <tr>
            <td>`"q3"`</td>
          </tr>
          <tr>
            <td>`"q4"`</td>
          </tr>
          <tr>
            <td>`"am"`</td>
          </tr>
          <tr>
            <td>`"pm"`</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>

    <emu-clause id="sec-isvalidcodefordisplaynames" aoid="IsValidCodeForDisplayNames">
      <h1>IsValidCodeForDisplayNames ( _type_,  _code_ )</h1>
      <p>
        The IsValidCodeForDisplayNames abstract operation is called with arguments _type_, and _code_.
        The following algorithm refers to <a href="https://www.unicode.org/reports/tr35/#Identifiers">UTS 35's Unicode Language and Locale Identifiers grammar</a>.
      </p>
      <emu-alg>
        1. If _type_ is `"language"`, then
          1. If _code_ matches the `unicode_language_id` production, then
            1. Return *true*.
          1. Else,
            1. Return *false*.
        1. If _type_ is `"region"`, then
          1. If _code_ matches the `unicode_region_subtag` production, then
            1. Return *true*.
          1. Else,
            1. Return *false*.
        1. If _type_ is `"script"`, then
          1. If _code_ matches the `unicode_script_subtag` production, then
            1. Return *true*.
          1. Else,
            1. Return *false*.
        1. If _type_ is `"currency"`, then
          1. Return ! IsWellFormedCurrencyCode(_code_).
        1. If _type_ is `"dateTime"`
          1. Return ! IsValidCodeForDateTime(_code_).
        1. Assert: _type_ is `"dateTimeField"`
        1. Return IsValidCodeForDateTimeField(_code_).
      </emu-alg>
    </emu-clause>

  </emu-clause>

  <emu-clause id="sec-intl-displaynames-constructor">
    <h1>The Intl.DisplayNames Constructor</h1>

    <p>
      The DisplayNames constructor is a standard built-in property of the Intl object.</p>

    <emu-clause id="sec-Intl.DisplayNames">
      <h1>Intl.DisplayNames ([ _locales_ [ , _options_ ]])</h1>

      <p>
        When the *Intl.DisplayNames* function is called with optional arguments the following steps are taken:
      </p>

      <emu-alg>
        1. If NewTarget is *undefined*, throw a *TypeError* exception.
        1. Let _displayNames_ be ? OrdinaryCreateFromConstructor(NewTarget, `"%DisplayNamesPrototype%"`, « [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. If _options_ is *undefined*, then
          1. Let _options_ be ObjectCreate(*null*).
        1. Else
          1. Let _options_ be ? ToObject(_options_).
        1. Let _opt_ be a new Record.
        1. Let _localeData_ be %DisplayNames%.[[LocaleData]].
        1. Let _matcher_ be ? GetOption(_options_, `"localeMatcher"`, `"string"`, &laquo; `"lookup"`, `"best fit"` &raquo;, `"best fit"`).
        1. Set _opt_.[[localeMatcher]] to _matcher_.
        1. Let _r_ be ResolveLocale(%DisplayNames%.[[AvailableLocales]], _requestedLocales_, _opt_, %DisplayNames%.[[RelevantExtensionKeys]]).
        1. Let _style_ be ? GetOption(_options_, `"style"`, `"string"`, &laquo; `"narrow"`, `"short"`, `"long"` &raquo;, `"long"`).
        1. Set _displayNames_.[[Style]] to _style_.
        1. Let _type_ be ? GetOption(_options_, `"type"`, `"string"`, &laquo; `"language"`, `"region"`, `"script"`, `"currency"`, `"dateTime"`, `"dateTimeField"` &raquo;, `"language"`).
        1. Set _displayNames_.[[Type]] to _type_.
        1. Let _fallback_ be ? GetOption(_options_, `"fallback"`, `"string"`, &laquo; `"code"`, `"none"` &raquo;, `"code"`).
        1. Set _displayNames_.[[Fallback]] to _fallback_.
        1. Set _displayNames_.[[Locale]] to the value of _r_.[[Locale]].
        1. Let _dataLocale_ be _r_.[[dataLocale]].
        1. Let _dataLocaleData_ be _localeData_.[[_dataLocale_]].
        1. Let _dataLocaleTypes_ be _dataLocaleData_.[[_type_]].
        1. Let _fields_ be dataLocaleTypes.[[_style_]].
        1. Set _displayNames_.[[Fields]] to _fields_.
        1. Return _displayNames_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-displaynames-constructor">
    <h1>Properties of the Intl.DisplayNames Constructor</h1>

    <p>
      The Intl.DisplayNames constructor has the following properties:
    </p>

    <emu-clause id="sec-Intl.DisplayNames.prototype">
      <h1>Intl.DisplayNames.prototype</h1>

      <p>
        The value of *Intl.DisplayNames.prototype* is *%DisplayNamesPrototype%*.
      </p>
      <p>
        This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.
      </p>
    </emu-clause>

    <emu-clause id="sec-Intl.DisplayNames.supportedLocalesOf">
      <h1>Intl.DisplayNames.supportedLocalesOf ( _locales_ [, _options_ ])</h1>

      <p>
        When the *supportedLocalesOf* method of *%DisplayNames%* is called, the following steps are taken:
      </p>

      <emu-alg>
        1. Let _availableLocales_ be *%DisplayNames%*.[[AvailableLocales]].
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. Return ? SupportedLocales(_availableLocales_, _requestedLocales_, _options_).
      </emu-alg>

    </emu-clause>

    <emu-clause id="sec-Intl.DisplayNames-internal-slots">
      <h1>Internal slots</h1>

      <p>
        The value of the [[AvailableLocales]] internal slot is implementation defined within the constraints described in <emu-xref href="#sec-internal-slots"></emu-xref>.
      </p>

      <p>
        The value of the [[RelevantExtensionKeys]] internal slot is &laquo;  &raquo;.
      </p>

      <emu-note>
        It is recommended that implementations use the locale data provided by the Common Locale Data Repository (available at <a href="http://cldr.unicode.org/">http://cldr.unicode.org/</a>).
      </emu-note>

    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-displaynames-prototype-object">
    <h1>Properties of the Intl.DisplayNames Prototype Object</h1>

    <p>
      The Intl.DisplayNames prototype object, referred to as *%DisplayNamesPrototype%*, is itself an ordinary object. It is not a Intl.DisplayNames instance, does not have an [[InitializedDisplayNames]] internal slot or any of the other internal slots of Intl.DisplayNames instance objects.
    </p>

    <emu-clause id="sec-Intl.DisplayNames.prototype.constructor">
      <h1>Intl.DisplayNames.prototype.constructor</h1>

      <p>
        The initial value of *Intl.DisplayNames.prototype.constructor* is the intrinsic object *%DisplayNames%*.
      </p>
    </emu-clause>

    <emu-clause id="sec-Intl.DisplayNames.prototype-@@tostringtag">
      <h1>Intl.DisplayNames.prototype[ @@toStringTag ]</h1>

      <p>
        The initial value of the @@toStringTag property is the string value `"Intl.DisplayNames"`.
      </p>
      <p>
        This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.
      </p>
    </emu-clause>

    <emu-clause id="sec-Intl.DisplayNames.prototype.of" aoid="Intl.DisplayNames.prototype.of">
      <h1>Intl.DisplayNames.prototype.of( _code_ )</h1>

      <p>
        When the *Intl.DisplayNames.prototype.of* is called with an argument _code_, the following steps are taken:
      </p>

      <emu-alg>
        1. Let _displayNames_ be *this* value.
        1. If Type(_displayNames_) is not Object, throw a *TypeError* exception.
        1. If _displayNames_ does not have an [[InitializedDisplayNames]] internal slot, throw a *TypeError* exception.
        1. If Type(_code_) is not String or Object, throw a *TypeError* exception.
        1. Let _code_ be ? ToString(_code_).
        1. If the result of ! IsValidCodeForDisplayNames(_displayNames_.[[Type]], _code_) is *false*, throw a *RangeError* exception.
        1. Let _fields_ be _displayNames_.[[Fields]].
        1. Let _name_ be _fields_[[_code_]].
        1. If _name_ is not *undefined*, then
          1. Return _name_.
        1. If _displayNames_.[[Fallback]] is `"code"`, then
          1. Return _code_.
        1. Return *undefined*.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-Intl.DisplayNames.prototype.resolvedOptions">
      <h1>Intl.DisplayNames.prototype.resolvedOptions ()</h1>

      <p>
        This function provides access to the locale and options computed during initialization of the object.
      </p>

      <emu-alg>
        1. Let _pr_ be the *this* value.
        1. If Type(_pr_) is not Object or _pr_ does not have an [[InitializedDisplayNames]] internal slot, throw a *TypeError* exception.
        1. Let _options_ be ! ObjectCreate(%ObjectPrototype%).
        1. For each row of <emu-xref href="#table-displaynames-resolvedoptions-properties"></emu-xref>, except the header row, in table order, do
          1. Let _p_ be the Property value of the current row.
          1. Let _v_ be the value of _pr_'s internal slot whose name is the Internal Slot value of the current row.
          1. If _v_ is not *undefined*, then
            1. Perform ! CreateDataPropertyOrThrow(_options_, _p_, _v_).
        1. Return _options_.
      </emu-alg>

      <emu-table id="table-displaynames-resolvedoptions-properties">
        <emu-caption>Resolved Options of DisplayNames Instances</emu-caption>
        <table class="real-table">
          <thead>
            <tr>
              <th>Internal Slot</th>
              <th>Property</th>
            </tr>
          </thead>
          <tr>
            <td>[[Locale]]</td>
            <td>`"locale"`</td>
          </tr>
          <tr>
            <td>[[Style]]</td>
            <td>`"style"`</td>
          </tr>
          <tr>
            <td>[[Type]]</td>
            <td>`"type"`</td>
          </tr>
          <tr>
            <td>[[Fallback]]</td>
            <td>`"fallback"`</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-displaynames-instances">
    <h1>Properties of Intl.DisplayNames Instances</h1>

    <p>
      Intl.DisplayNames instances are ordinary objects that inherit properties from %DisplayNamesPrototype%.
    </p>

    <p>
      Intl.DisplayNames instances have an [[InitializedDisplayNames]] internal slot.
    </p>

    <p>
      Intl.DisplayNames instances also have several internal slots that are computed by the constructor:
    </p>

    <ul>
      <li>[[Locale]] is a String value with the language tag of the locale whose localization is used for formatting.</li>
      <li>[[Style]] is one of the String values `"narrow"`, `"short"`, or `"long"`, identifying the display names style used.</li>
      <li>[[Type]] is one of the String values `"language"`, `"region"`, `"script"`, `"currency"`, `"dateTime"`, or `"dateTimeField"`, identifying the type of the display names requested.</li>
      <li>[[Fallback]] is one of the String values `"code"`, or `"none"`, identifying the fallback return when the system does not have the requested display name.</li>
    </ul>

  </emu-clause>
</emu-clause>
